## This includes VPC, subnet, Security Group, Internet Gateway and route table
- name: provision aws resources
  include_tasks: resources.yml

## control node setup ###
- name: set control node type
  set_fact:
    ansible_node: "{{ ec2_control_node['ansible'] }}"

- name: find ami for ansible control node
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[ansible_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[ansible_node].filter }}"
      architecture: "{{ ec2_instance_types[ansible_node].architecture }}"
  register: amis

- name: save ami for ansible control node
  set_fact:
    ansible_control_node_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
- name: Check to see if AWS-WebServer exists
  ec2_instance_facts:
    filters:
      "tag:Name": "AWS-WebServer"
      instance-state-name: "running"
    region: "{{ ec2_region }}"
  register: vm_exists

- debug:
    var: vm_exists

- name: Create AWS-WebServer instance if it does not exist
  block:
  - name: Create AWS-WebServer instance
    ec2:
      assign_public_ip: yes
      key_name: "{{ ec2_name_prefix }}-key"
      group: "{{ ec2_security_group }}"
      instance_type: "{{ ec2_instance_types[ansible_node].size }}"
      image: "{{ ansible_control_node_ami.image_id }}"
      region: "{{ ec2_region }}"
      exact_count: "{{ vm_total }}"
      count_tag:
        Workshop_ansible: "{{ec2_name_prefix}}-ansible"
      wait: "{{ ec2_wait }}"
      vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: "{{ ec2_instance_types[ansible_node].disk_space }}"
          delete_on_termination: true
    register: control_output
  
  - pause:
      seconds: 45

  - name: Ensure tags are present
    ec2_tag:
      region: "{{ ec2_region }}"
      resource: "{{control_output.instance_ids[0]}}"
      state: present
      tags:
        Name: "{{ ec2_name_prefix }}"
        Workshop_ansible: "{{ec2_name_prefix}}"
        Workshop: "{{ec2_name_prefix}}"
        Username: "{{ linklight_user }}"
        Info: "Username that provisioned this-> {{ linklight_user }}"
        Linklight: "This was provisioned through the linklight provisioner"
        short_name: "ansible"
    when: control_output.instance_ids is not none
  when: vm_exists.instances == []